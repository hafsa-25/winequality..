# -*- coding: utf-8 -*-
"""winequality.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1py1xRQQL20JGJiVP6Y824LSEvWIk98zk
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay

# Load dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
df = pd.read_csv(url, sep=';')

# Drop Duplicate Values
df.duplicated().sum()

# Binary classification: quality >=6 is good (1), else bad (0)
df['quality_label'] = df['quality'].apply(lambda x: 1 if x >= 6 else 0)

# Drop Quality column
df.drop("quality", axis = 1, inplace=True)

# Selected features
features = ['alcohol', 'sulphates', 'volatile acidity', 'citric acid', 'pH', 'density', 'residual sugar','chlorides', 'free sulfur dioxide','total sulfur dioxide']
X = df[features]
y = df['quality_label']

# Feature scaling
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Grid search for best RandomForest model
params = {
    'n_estimators': [100, 200],
    'max_depth': [5, 10, None],
    'min_samples_split': [2, 5]
}
grid = GridSearchCV(RandomForestClassifier(random_state=42), param_grid=params, cv=5)
grid.fit(X_train, y_train)
model = grid.best_estimator_

# Evaluation
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

train_accuracy = accuracy_score(y_train, y_train_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)

print(f"Training Accuracy: {train_accuracy * 100:.2f}%")
print(f"Testing Accuracy: {test_accuracy * 100:.2f}%")

print("\n Classification Report:\n")
print(classification_report(y_test, y_test_pred, target_names=['Bad', 'Good']))

# Confusion matrix
cm = confusion_matrix(y_test, y_test_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Bad', 'Good'])
disp.plot(cmap='Blues')
plt.title("Confusion Matrix")
plt.grid(False)
plt.tight_layout()
plt.show()

# Feature importance
importances = model.feature_importances_
sns.barplot(x=importances, y=features)
plt.title("Feature Importances")
plt.xlabel("Importance Score")
plt.ylabel("Features")
plt.grid(True)
plt.tight_layout()
plt.show()

# ===== USER INPUT SECTION =====
print("\n Enter wine chemical properties to predict quality:")

user_input = []
for feature in features:
    val = float(input(f"Enter {feature}: "))
    user_input.append(val)

# Preprocess input and predict
user_scaled = scaler.transform([user_input])
prediction = model.predict(user_scaled)[0]

# Display prediction
quality = "Good" if prediction == 1 else "Bad"
print(f"\n Based on the input values, the predicted wine quality is: {quality}")



